-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 103 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> prods                          (0)
	prods -> FuncDeclaration                           (1)
	prods -> prods FuncDeclaration                     (2)
	FuncDeclaration -> funcName ':' FuncBodyInitArea Match   (3)
	FuncDeclaration -> Main                            (4)
	Exp -> Cond                                        (5)
	Exp -> Equals                                      (6)
	Exp -> OutPattern                                  (7)
	Exp -> '(' Exp ')'                                 (8)
	Exp -> Exp ';' Exp                                 (9)
	Exp -> Exp ';'                                     (10)
	Maths -> Maths '+' Maths                           (11)
	Maths -> Maths '-' Maths                           (12)
	Maths -> Maths '*' Maths                           (13)
	Maths -> Maths '/' Maths                           (14)
	Maths -> '(' Maths ')'                             (15)
	Maths -> intValue                                  (16)
	Maths -> var                                       (17)
	Equals -> var '=' ComparableExp                    (18)
	T -> boolType                                      (19)
	T -> intType                                       (20)
	B -> trueValue                                     (21)
	B -> falseValue                                    (22)
	Var -> var ':' T                                   (23)
	VarInit -> Var '=' intValue                        (24)
	VarInit -> Var '=' B                               (25)
	Match -> '[' ']'                                   (26)
	Match -> '[' eof ']'                               (27)
	Match -> '[' Var ']' '=' Exp                       (28)
	Match -> '[' Var ',' MatchRec                      (29)
	MatchRec -> Var ']' '=' Exp                        (30)
	MatchRec -> Var ',' MatchRec                       (31)
	OutPattern -> '[' ']'                              (32)
	OutPattern -> '[' Maths ',' OutPatternRec          (33)
	OutPattern -> '[' Maths ']'                        (34)
	OutPatternRec -> Maths ']'                         (35)
	OutPatternRec -> Maths ',' OutPatternRec           (36)
	Comparables -> Maths                               (37)
	Comparables -> B                                   (38)
	ComparableExp -> ComparableExp '==' ComparableExp   (39)
	ComparableExp -> ComparableExp '<' ComparableExp   (40)
	ComparableExp -> ComparableExp '>' ComparableExp   (41)
	ComparableExp -> '!' ComparableExp                 (42)
	ComparableExp -> '(' ComparableExp ')'             (43)
	ComparableExp -> Comparables                       (44)
	Cond -> if '(' ComparableExp ')' ':' Exp else ':' Exp   (45)
	FuncBodyInitArea -> '{' '}'                        (46)
	FuncBodyInitArea -> '{' VarInit ';' '}'            (47)
	FuncBodyInitArea -> '{' VarInit ';' FuncBodyInitAreaRec   (48)
	FuncBodyInitAreaRec -> VarInit ';' '}'             (49)
	FuncBodyInitAreaRec -> VarInit ';' FuncBodyInitAreaRec   (50)
	Main -> main ':' stdin '>>' funcName '>>' MainRec   (51)
	Main -> main ':' stdin '>>' funcName '>>' stdout   (52)
	MainRec -> funcName '>>' stdout                    (53)
	MainRec -> funcName '>>' MainRec                   (54)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	intValue       { TokenIntValue _ $$ }
	var            { TokenVar _ $$ }
	funcName       { TokenFuncName _ $$ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	':'            { TokenColon _ }
	'['            { TokenLBracket _ }
	']'            { TokenRBracket _ }
	'{'            { TokenLCurlyBracket _ }
	'}'            { TokenRCurlyBracket _ }
	','            { TokenComma _ }
	'>>'           { TokenPipe _ }
	intType        { TokenTypeInt _ }
	eof            { TokenEOF _ }
	boolType       { TokenTypeBool _ }
	';'            { TokenSemiColon _ }
	if             { TokenIf _ }
	else           { TokenElse _ }
	main           { TokenMain _ }
	trueValue      { TokenTrueValue _ }
	falseValue     { TokenFalseValue _ }
	'=='           { TokenCompare _ }
	'!'            { TokenNot _ }
	'<'            { TokenSmallerThan _ }
	'>'            { TokenGreaterThan _ }
	stdin          { TokenStdin _ }
	stdout         { TokenStdout _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	prods           rules 1, 2
	FuncDeclaration rules 3, 4
	Exp             rules 5, 6, 7, 8, 9, 10
	Maths           rules 11, 12, 13, 14, 15, 16, 17
	Equals          rule  18
	T               rules 19, 20
	B               rules 21, 22
	Var             rule  23
	VarInit         rules 24, 25
	Match           rules 26, 27, 28, 29
	MatchRec        rules 30, 31
	OutPattern      rules 32, 33, 34
	OutPatternRec   rules 35, 36
	Comparables     rules 37, 38
	ComparableExp   rules 39, 40, 41, 42, 43, 44
	Cond            rule  45
	FuncBodyInitArea rules 46, 47, 48
	FuncBodyInitAreaRec rules 49, 50
	Main            rules 51, 52
	MainRec         rules 53, 54

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	funcName       shift, and enter state 4
	main           shift, and enter state 5

	prods          goto state 6
	FuncDeclarationgoto state 2
	Main           goto state 3

State 1


	funcName       shift, and enter state 4
	main           shift, and enter state 5

	FuncDeclarationgoto state 2
	Main           goto state 3

State 2

	prods -> FuncDeclaration .                          (rule 1)

	funcName       reduce using rule 1
	main           reduce using rule 1
	%eof           reduce using rule 1


State 3

	FuncDeclaration -> Main .                           (rule 4)

	funcName       reduce using rule 4
	main           reduce using rule 4
	%eof           reduce using rule 4


State 4

	FuncDeclaration -> funcName . ':' FuncBodyInitArea Match    (rule 3)

	':'            shift, and enter state 9


State 5

	Main -> main . ':' stdin '>>' funcName '>>' MainRec    (rule 51)
	Main -> main . ':' stdin '>>' funcName '>>' stdout    (rule 52)

	':'            shift, and enter state 8


State 6

	%start_parseCalc -> prods .                         (rule 0)
	prods -> prods . FuncDeclaration                    (rule 2)

	funcName       shift, and enter state 4
	main           shift, and enter state 5
	%eof           accept

	FuncDeclarationgoto state 7
	Main           goto state 3

State 7

	prods -> prods FuncDeclaration .                    (rule 2)

	funcName       reduce using rule 2
	main           reduce using rule 2
	%eof           reduce using rule 2


State 8

	Main -> main ':' . stdin '>>' funcName '>>' MainRec    (rule 51)
	Main -> main ':' . stdin '>>' funcName '>>' stdout    (rule 52)

	stdin          shift, and enter state 12


State 9

	FuncDeclaration -> funcName ':' . FuncBodyInitArea Match    (rule 3)

	'{'            shift, and enter state 11

	FuncBodyInitAreagoto state 10

State 10

	FuncDeclaration -> funcName ':' FuncBodyInitArea . Match    (rule 3)

	'['            shift, and enter state 19

	Match          goto state 18

State 11

	FuncBodyInitArea -> '{' . '}'                       (rule 46)
	FuncBodyInitArea -> '{' . VarInit ';' '}'           (rule 47)
	FuncBodyInitArea -> '{' . VarInit ';' FuncBodyInitAreaRec    (rule 48)

	var            shift, and enter state 16
	'}'            shift, and enter state 17

	Var            goto state 14
	VarInit        goto state 15

State 12

	Main -> main ':' stdin . '>>' funcName '>>' MainRec    (rule 51)
	Main -> main ':' stdin . '>>' funcName '>>' stdout    (rule 52)

	'>>'           shift, and enter state 13


State 13

	Main -> main ':' stdin '>>' . funcName '>>' MainRec    (rule 51)
	Main -> main ':' stdin '>>' . funcName '>>' stdout    (rule 52)

	funcName       shift, and enter state 26


State 14

	VarInit -> Var . '=' intValue                       (rule 24)
	VarInit -> Var . '=' B                              (rule 25)

	'='            shift, and enter state 25


State 15

	FuncBodyInitArea -> '{' VarInit . ';' '}'           (rule 47)
	FuncBodyInitArea -> '{' VarInit . ';' FuncBodyInitAreaRec    (rule 48)

	';'            shift, and enter state 24


State 16

	Var -> var . ':' T                                  (rule 23)

	':'            shift, and enter state 23


State 17

	FuncBodyInitArea -> '{' '}' .                       (rule 46)

	'['            reduce using rule 46


State 18

	FuncDeclaration -> funcName ':' FuncBodyInitArea Match .    (rule 3)

	funcName       reduce using rule 3
	main           reduce using rule 3
	%eof           reduce using rule 3


State 19

	Match -> '[' . ']'                                  (rule 26)
	Match -> '[' . eof ']'                              (rule 27)
	Match -> '[' . Var ']' '=' Exp                      (rule 28)
	Match -> '[' . Var ',' MatchRec                     (rule 29)

	var            shift, and enter state 16
	']'            shift, and enter state 21
	eof            shift, and enter state 22

	Var            goto state 20

State 20

	Match -> '[' Var . ']' '=' Exp                      (rule 28)
	Match -> '[' Var . ',' MatchRec                     (rule 29)

	']'            shift, and enter state 39
	','            shift, and enter state 40


State 21

	Match -> '[' ']' .                                  (rule 26)

	funcName       reduce using rule 26
	main           reduce using rule 26
	%eof           reduce using rule 26


State 22

	Match -> '[' eof . ']'                              (rule 27)

	']'            shift, and enter state 38


State 23

	Var -> var ':' . T                                  (rule 23)

	intType        shift, and enter state 36
	boolType       shift, and enter state 37

	T              goto state 35

State 24

	FuncBodyInitArea -> '{' VarInit ';' . '}'           (rule 47)
	FuncBodyInitArea -> '{' VarInit ';' . FuncBodyInitAreaRec    (rule 48)

	var            shift, and enter state 16
	'}'            shift, and enter state 34

	Var            goto state 14
	VarInit        goto state 32
	FuncBodyInitAreaRecgoto state 33

State 25

	VarInit -> Var '=' . intValue                       (rule 24)
	VarInit -> Var '=' . B                              (rule 25)

	intValue       shift, and enter state 29
	trueValue      shift, and enter state 30
	falseValue     shift, and enter state 31

	B              goto state 28

State 26

	Main -> main ':' stdin '>>' funcName . '>>' MainRec    (rule 51)
	Main -> main ':' stdin '>>' funcName . '>>' stdout    (rule 52)

	'>>'           shift, and enter state 27


State 27

	Main -> main ':' stdin '>>' funcName '>>' . MainRec    (rule 51)
	Main -> main ':' stdin '>>' funcName '>>' . stdout    (rule 52)

	funcName       shift, and enter state 46
	stdout         shift, and enter state 47

	MainRec        goto state 45

State 28

	VarInit -> Var '=' B .                              (rule 25)

	';'            reduce using rule 25


State 29

	VarInit -> Var '=' intValue .                       (rule 24)

	';'            reduce using rule 24


State 30

	B -> trueValue .                                    (rule 21)

	funcName       reduce using rule 21
	')'            reduce using rule 21
	';'            reduce using rule 21
	else           reduce using rule 21
	main           reduce using rule 21
	'=='           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	%eof           reduce using rule 21


State 31

	B -> falseValue .                                   (rule 22)

	funcName       reduce using rule 22
	')'            reduce using rule 22
	';'            reduce using rule 22
	else           reduce using rule 22
	main           reduce using rule 22
	'=='           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	%eof           reduce using rule 22


State 32

	FuncBodyInitAreaRec -> VarInit . ';' '}'            (rule 49)
	FuncBodyInitAreaRec -> VarInit . ';' FuncBodyInitAreaRec    (rule 50)

	';'            shift, and enter state 44


State 33

	FuncBodyInitArea -> '{' VarInit ';' FuncBodyInitAreaRec .    (rule 48)

	'['            reduce using rule 48


State 34

	FuncBodyInitArea -> '{' VarInit ';' '}' .           (rule 47)

	'['            reduce using rule 47


State 35

	Var -> var ':' T .                                  (rule 23)

	'='            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23


State 36

	T -> intType .                                      (rule 20)

	'='            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20


State 37

	T -> boolType .                                     (rule 19)

	'='            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19


State 38

	Match -> '[' eof ']' .                              (rule 27)

	funcName       reduce using rule 27
	main           reduce using rule 27
	%eof           reduce using rule 27


State 39

	Match -> '[' Var ']' . '=' Exp                      (rule 28)

	'='            shift, and enter state 43


State 40

	Match -> '[' Var ',' . MatchRec                     (rule 29)

	var            shift, and enter state 16

	Var            goto state 41
	MatchRec       goto state 42

State 41

	MatchRec -> Var . ']' '=' Exp                       (rule 30)
	MatchRec -> Var . ',' MatchRec                      (rule 31)

	']'            shift, and enter state 59
	','            shift, and enter state 60


State 42

	Match -> '[' Var ',' MatchRec .                     (rule 29)

	funcName       reduce using rule 29
	main           reduce using rule 29
	%eof           reduce using rule 29


State 43

	Match -> '[' Var ']' '=' . Exp                      (rule 28)

	var            shift, and enter state 55
	'('            shift, and enter state 56
	'['            shift, and enter state 57
	if             shift, and enter state 58

	Exp            goto state 51
	Equals         goto state 52
	OutPattern     goto state 53
	Cond           goto state 54

State 44

	FuncBodyInitAreaRec -> VarInit ';' . '}'            (rule 49)
	FuncBodyInitAreaRec -> VarInit ';' . FuncBodyInitAreaRec    (rule 50)

	var            shift, and enter state 16
	'}'            shift, and enter state 50

	Var            goto state 14
	VarInit        goto state 32
	FuncBodyInitAreaRecgoto state 49

State 45

	Main -> main ':' stdin '>>' funcName '>>' MainRec .    (rule 51)

	funcName       reduce using rule 51
	main           reduce using rule 51
	%eof           reduce using rule 51


State 46

	MainRec -> funcName . '>>' stdout                   (rule 53)
	MainRec -> funcName . '>>' MainRec                  (rule 54)

	'>>'           shift, and enter state 48


State 47

	Main -> main ':' stdin '>>' funcName '>>' stdout .    (rule 52)

	funcName       reduce using rule 52
	main           reduce using rule 52
	%eof           reduce using rule 52


State 48

	MainRec -> funcName '>>' . stdout                   (rule 53)
	MainRec -> funcName '>>' . MainRec                  (rule 54)

	funcName       shift, and enter state 46
	stdout         shift, and enter state 73

	MainRec        goto state 72

State 49

	FuncBodyInitAreaRec -> VarInit ';' FuncBodyInitAreaRec .    (rule 50)

	'['            reduce using rule 50


State 50

	FuncBodyInitAreaRec -> VarInit ';' '}' .            (rule 49)

	'['            reduce using rule 49


State 51

	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)
	Match -> '[' Var ']' '=' Exp .                      (rule 28)

	funcName       reduce using rule 28
	';'            shift, and enter state 71
	main           reduce using rule 28
	%eof           reduce using rule 28


State 52

	Exp -> Equals .                                     (rule 6)

	funcName       reduce using rule 6
	')'            reduce using rule 6
	';'            reduce using rule 6
	else           reduce using rule 6
	main           reduce using rule 6
	%eof           reduce using rule 6


State 53

	Exp -> OutPattern .                                 (rule 7)

	funcName       reduce using rule 7
	')'            reduce using rule 7
	';'            reduce using rule 7
	else           reduce using rule 7
	main           reduce using rule 7
	%eof           reduce using rule 7


State 54

	Exp -> Cond .                                       (rule 5)

	funcName       reduce using rule 5
	')'            reduce using rule 5
	';'            reduce using rule 5
	else           reduce using rule 5
	main           reduce using rule 5
	%eof           reduce using rule 5


State 55

	Equals -> var . '=' ComparableExp                   (rule 18)

	'='            shift, and enter state 70


State 56

	Exp -> '(' . Exp ')'                                (rule 8)

	var            shift, and enter state 55
	'('            shift, and enter state 56
	'['            shift, and enter state 57
	if             shift, and enter state 58

	Exp            goto state 69
	Equals         goto state 52
	OutPattern     goto state 53
	Cond           goto state 54

State 57

	OutPattern -> '[' . ']'                             (rule 32)
	OutPattern -> '[' . Maths ',' OutPatternRec         (rule 33)
	OutPattern -> '[' . Maths ']'                       (rule 34)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 67
	']'            shift, and enter state 68

	Maths          goto state 64

State 58

	Cond -> if . '(' ComparableExp ')' ':' Exp else ':' Exp    (rule 45)

	'('            shift, and enter state 63


State 59

	MatchRec -> Var ']' . '=' Exp                       (rule 30)

	'='            shift, and enter state 62


State 60

	MatchRec -> Var ',' . MatchRec                      (rule 31)

	var            shift, and enter state 16

	Var            goto state 41
	MatchRec       goto state 61

State 61

	MatchRec -> Var ',' MatchRec .                      (rule 31)

	funcName       reduce using rule 31
	main           reduce using rule 31
	%eof           reduce using rule 31


State 62

	MatchRec -> Var ']' '=' . Exp                       (rule 30)

	var            shift, and enter state 55
	'('            shift, and enter state 56
	'['            shift, and enter state 57
	if             shift, and enter state 58

	Exp            goto state 90
	Equals         goto state 52
	OutPattern     goto state 53
	Cond           goto state 54

State 63

	Cond -> if '(' . ComparableExp ')' ':' Exp else ':' Exp    (rule 45)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 79
	trueValue      shift, and enter state 30
	falseValue     shift, and enter state 31
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 89

State 64

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	OutPattern -> '[' Maths . ',' OutPatternRec         (rule 33)
	OutPattern -> '[' Maths . ']'                       (rule 34)

	'+'            shift, and enter state 83
	'-'            shift, and enter state 84
	'*'            shift, and enter state 85
	'/'            shift, and enter state 86
	']'            shift, and enter state 87
	','            shift, and enter state 88


State 65

	Maths -> intValue .                                 (rule 16)

	funcName       reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	';'            reduce using rule 16
	else           reduce using rule 16
	main           reduce using rule 16
	'=='           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	%eof           reduce using rule 16


State 66

	Maths -> var .                                      (rule 17)

	funcName       reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	';'            reduce using rule 17
	else           reduce using rule 17
	main           reduce using rule 17
	'=='           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	%eof           reduce using rule 17


State 67

	Maths -> '(' . Maths ')'                            (rule 15)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 67

	Maths          goto state 82

State 68

	OutPattern -> '[' ']' .                             (rule 32)

	funcName       reduce using rule 32
	')'            reduce using rule 32
	';'            reduce using rule 32
	else           reduce using rule 32
	main           reduce using rule 32
	%eof           reduce using rule 32


State 69

	Exp -> '(' Exp . ')'                                (rule 8)
	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)

	')'            shift, and enter state 81
	';'            shift, and enter state 71


State 70

	Equals -> var '=' . ComparableExp                   (rule 18)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 79
	trueValue      shift, and enter state 30
	falseValue     shift, and enter state 31
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 78

State 71

	Exp -> Exp ';' . Exp                                (rule 9)
	Exp -> Exp ';' .                                    (rule 10)

	var            shift, and enter state 55
	funcName       reduce using rule 10
	'('            shift, and enter state 56
	')'            reduce using rule 10
	'['            shift, and enter state 57
	';'            reduce using rule 10
	if             shift, and enter state 58
	else           reduce using rule 10
	main           reduce using rule 10
	%eof           reduce using rule 10

	Exp            goto state 74
	Equals         goto state 52
	OutPattern     goto state 53
	Cond           goto state 54

State 72

	MainRec -> funcName '>>' MainRec .                  (rule 54)

	funcName       reduce using rule 54
	main           reduce using rule 54
	%eof           reduce using rule 54


State 73

	MainRec -> funcName '>>' stdout .                   (rule 53)

	funcName       reduce using rule 53
	main           reduce using rule 53
	%eof           reduce using rule 53


State 74

	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp ';' Exp .                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)

	funcName       reduce using rule 9
	')'            reduce using rule 9
	';'            shift, and enter state 71
	else           reduce using rule 9
	main           reduce using rule 9
	%eof           reduce using rule 9


State 75

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Comparables -> Maths .                              (rule 37)

	funcName       reduce using rule 37
	'+'            shift, and enter state 83
	'-'            shift, and enter state 84
	'*'            shift, and enter state 85
	'/'            shift, and enter state 86
	')'            reduce using rule 37
	';'            reduce using rule 37
	else           reduce using rule 37
	main           reduce using rule 37
	'=='           reduce using rule 37
	'<'            reduce using rule 37
	'>'            reduce using rule 37
	%eof           reduce using rule 37


State 76

	Comparables -> B .                                  (rule 38)

	funcName       reduce using rule 38
	')'            reduce using rule 38
	';'            reduce using rule 38
	else           reduce using rule 38
	main           reduce using rule 38
	'=='           reduce using rule 38
	'<'            reduce using rule 38
	'>'            reduce using rule 38
	%eof           reduce using rule 38


State 77

	ComparableExp -> Comparables .                      (rule 44)

	funcName       reduce using rule 44
	')'            reduce using rule 44
	';'            reduce using rule 44
	else           reduce using rule 44
	main           reduce using rule 44
	'=='           reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44
	%eof           reduce using rule 44


State 78

	Equals -> var '=' ComparableExp .                   (rule 18)
	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 39)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 41)

	funcName       reduce using rule 18
	')'            reduce using rule 18
	';'            reduce using rule 18
	else           reduce using rule 18
	main           reduce using rule 18
	'=='           shift, and enter state 92
	'<'            shift, and enter state 93
	'>'            shift, and enter state 94
	%eof           reduce using rule 18


State 79

	Maths -> '(' . Maths ')'                            (rule 15)
	ComparableExp -> '(' . ComparableExp ')'            (rule 43)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 79
	trueValue      shift, and enter state 30
	falseValue     shift, and enter state 31
	'!'            shift, and enter state 80

	Maths          goto state 103
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 104

State 80

	ComparableExp -> '!' . ComparableExp                (rule 42)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 79
	trueValue      shift, and enter state 30
	falseValue     shift, and enter state 31
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 102

State 81

	Exp -> '(' Exp ')' .                                (rule 8)

	funcName       reduce using rule 8
	')'            reduce using rule 8
	';'            reduce using rule 8
	else           reduce using rule 8
	main           reduce using rule 8
	%eof           reduce using rule 8


State 82

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Maths -> '(' Maths . ')'                            (rule 15)

	'+'            shift, and enter state 83
	'-'            shift, and enter state 84
	'*'            shift, and enter state 85
	'/'            shift, and enter state 86
	')'            shift, and enter state 101


State 83

	Maths -> Maths '+' . Maths                          (rule 11)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 67

	Maths          goto state 100

State 84

	Maths -> Maths '-' . Maths                          (rule 12)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 67

	Maths          goto state 99

State 85

	Maths -> Maths '*' . Maths                          (rule 13)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 67

	Maths          goto state 98

State 86

	Maths -> Maths '/' . Maths                          (rule 14)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 67

	Maths          goto state 97

State 87

	OutPattern -> '[' Maths ']' .                       (rule 34)

	funcName       reduce using rule 34
	')'            reduce using rule 34
	';'            reduce using rule 34
	else           reduce using rule 34
	main           reduce using rule 34
	%eof           reduce using rule 34


State 88

	OutPattern -> '[' Maths ',' . OutPatternRec         (rule 33)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 67

	Maths          goto state 95
	OutPatternRec  goto state 96

State 89

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 39)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 41)
	Cond -> if '(' ComparableExp . ')' ':' Exp else ':' Exp    (rule 45)

	')'            shift, and enter state 91
	'=='           shift, and enter state 92
	'<'            shift, and enter state 93
	'>'            shift, and enter state 94


State 90

	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)
	MatchRec -> Var ']' '=' Exp .                       (rule 30)

	funcName       reduce using rule 30
	';'            shift, and enter state 71
	main           reduce using rule 30
	%eof           reduce using rule 30


State 91

	Cond -> if '(' ComparableExp ')' . ':' Exp else ':' Exp    (rule 45)

	':'            shift, and enter state 111


State 92

	ComparableExp -> ComparableExp '==' . ComparableExp    (rule 39)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 79
	trueValue      shift, and enter state 30
	falseValue     shift, and enter state 31
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 110

State 93

	ComparableExp -> ComparableExp '<' . ComparableExp    (rule 40)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 79
	trueValue      shift, and enter state 30
	falseValue     shift, and enter state 31
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 109

State 94

	ComparableExp -> ComparableExp '>' . ComparableExp    (rule 41)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 79
	trueValue      shift, and enter state 30
	falseValue     shift, and enter state 31
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 108

State 95

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	OutPatternRec -> Maths . ']'                        (rule 35)
	OutPatternRec -> Maths . ',' OutPatternRec          (rule 36)

	'+'            shift, and enter state 83
	'-'            shift, and enter state 84
	'*'            shift, and enter state 85
	'/'            shift, and enter state 86
	']'            shift, and enter state 106
	','            shift, and enter state 107


State 96

	OutPattern -> '[' Maths ',' OutPatternRec .         (rule 33)

	funcName       reduce using rule 33
	')'            reduce using rule 33
	';'            reduce using rule 33
	else           reduce using rule 33
	main           reduce using rule 33
	%eof           reduce using rule 33


State 97

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Maths -> Maths '/' Maths .                          (rule 14)

	funcName       reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	';'            reduce using rule 14
	else           reduce using rule 14
	main           reduce using rule 14
	'=='           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	%eof           reduce using rule 14


State 98

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths '*' Maths .                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)

	funcName       reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	else           reduce using rule 13
	main           reduce using rule 13
	'=='           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	%eof           reduce using rule 13


State 99

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths '-' Maths .                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)

	funcName       reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12
	else           reduce using rule 12
	main           reduce using rule 12
	'=='           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	%eof           reduce using rule 12


State 100

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths '+' Maths .                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)

	funcName       reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	else           reduce using rule 11
	main           reduce using rule 11
	'=='           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	%eof           reduce using rule 11


State 101

	Maths -> '(' Maths ')' .                            (rule 15)

	funcName       reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	';'            reduce using rule 15
	else           reduce using rule 15
	main           reduce using rule 15
	'=='           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	%eof           reduce using rule 15


State 102

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 39)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 41)
	ComparableExp -> '!' ComparableExp .                (rule 42)

	funcName       reduce using rule 42
	')'            reduce using rule 42
	';'            reduce using rule 42
	else           reduce using rule 42
	main           reduce using rule 42
	'=='           reduce using rule 42
	'<'            reduce using rule 42
	'>'            reduce using rule 42
	%eof           reduce using rule 42


State 103

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Maths -> '(' Maths . ')'                            (rule 15)
	Comparables -> Maths .                              (rule 37)

	'+'            shift, and enter state 83
	'-'            shift, and enter state 84
	'*'            shift, and enter state 85
	'/'            shift, and enter state 86
	')'            shift, and enter state 101
			(reduce using rule 37)

	'=='           reduce using rule 37
	'<'            reduce using rule 37
	'>'            reduce using rule 37


State 104

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 39)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 41)
	ComparableExp -> '(' ComparableExp . ')'            (rule 43)

	')'            shift, and enter state 105
	'=='           shift, and enter state 92
	'<'            shift, and enter state 93
	'>'            shift, and enter state 94


State 105

	ComparableExp -> '(' ComparableExp ')' .            (rule 43)

	funcName       reduce using rule 43
	')'            reduce using rule 43
	';'            reduce using rule 43
	else           reduce using rule 43
	main           reduce using rule 43
	'=='           reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43
	%eof           reduce using rule 43


State 106

	OutPatternRec -> Maths ']' .                        (rule 35)

	funcName       reduce using rule 35
	')'            reduce using rule 35
	';'            reduce using rule 35
	else           reduce using rule 35
	main           reduce using rule 35
	%eof           reduce using rule 35


State 107

	OutPatternRec -> Maths ',' . OutPatternRec          (rule 36)

	intValue       shift, and enter state 65
	var            shift, and enter state 66
	'('            shift, and enter state 67

	Maths          goto state 95
	OutPatternRec  goto state 113

State 108

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 39)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 41)
	ComparableExp -> ComparableExp '>' ComparableExp .    (rule 41)

	funcName       reduce using rule 41
	')'            reduce using rule 41
	';'            reduce using rule 41
	else           reduce using rule 41
	main           reduce using rule 41
	'=='           reduce using rule 41
	'<'            reduce using rule 41
	'>'            reduce using rule 41
	%eof           reduce using rule 41


State 109

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 39)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp '<' ComparableExp .    (rule 40)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 41)

	funcName       reduce using rule 40
	')'            reduce using rule 40
	';'            reduce using rule 40
	else           reduce using rule 40
	main           reduce using rule 40
	'=='           reduce using rule 40
	'<'            reduce using rule 40
	'>'            reduce using rule 40
	%eof           reduce using rule 40


State 110

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 39)
	ComparableExp -> ComparableExp '==' ComparableExp .    (rule 39)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 41)

	funcName       reduce using rule 39
	')'            reduce using rule 39
	';'            reduce using rule 39
	else           reduce using rule 39
	main           reduce using rule 39
	'=='           reduce using rule 39
	'<'            reduce using rule 39
	'>'            reduce using rule 39
	%eof           reduce using rule 39


State 111

	Cond -> if '(' ComparableExp ')' ':' . Exp else ':' Exp    (rule 45)

	var            shift, and enter state 55
	'('            shift, and enter state 56
	'['            shift, and enter state 57
	if             shift, and enter state 58

	Exp            goto state 112
	Equals         goto state 52
	OutPattern     goto state 53
	Cond           goto state 54

State 112

	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)
	Cond -> if '(' ComparableExp ')' ':' Exp . else ':' Exp    (rule 45)

	';'            shift, and enter state 71
	else           shift, and enter state 114


State 113

	OutPatternRec -> Maths ',' OutPatternRec .          (rule 36)

	funcName       reduce using rule 36
	')'            reduce using rule 36
	';'            reduce using rule 36
	else           reduce using rule 36
	main           reduce using rule 36
	%eof           reduce using rule 36


State 114

	Cond -> if '(' ComparableExp ')' ':' Exp else . ':' Exp    (rule 45)

	':'            shift, and enter state 115


State 115

	Cond -> if '(' ComparableExp ')' ':' Exp else ':' . Exp    (rule 45)

	var            shift, and enter state 55
	'('            shift, and enter state 56
	'['            shift, and enter state 57
	if             shift, and enter state 58

	Exp            goto state 116
	Equals         goto state 52
	OutPattern     goto state 53
	Cond           goto state 54

State 116

	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)
	Cond -> if '(' ComparableExp ')' ':' Exp else ':' Exp .    (rule 45)

	funcName       reduce using rule 45
	')'            reduce using rule 45
	';'            reduce using rule 45
	else           reduce using rule 45
	main           reduce using rule 45
	%eof           reduce using rule 45


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 55
Number of terminals: 32
Number of non-terminals: 21
Number of states: 117
