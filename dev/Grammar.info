-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 82 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> prods                          (0)
	prods -> FuncDeclaration                           (1)
	prods -> prods FuncDeclaration                     (2)
	FuncDeclaration -> funcName ':' FuncBodyInitArea Exp   (3)
	FuncDeclaration -> Main                            (4)
	Exp -> Cond                                        (5)
	Exp -> Equals                                      (6)
	Exp -> OutPattern                                  (7)
	Exp -> '(' Exp ')'                                 (8)
	Exp -> Exp ';' Exp                                 (9)
	Exp -> Exp ';'                                     (10)
	Maths -> Maths '+' Maths                           (11)
	Maths -> Maths '-' Maths                           (12)
	Maths -> Maths '*' Maths                           (13)
	Maths -> Maths '/' Maths                           (14)
	Maths -> '(' Maths ')'                             (15)
	Maths -> intValue                                  (16)
	Maths -> var                                       (17)
	Equals -> Match '=' OutPattern                     (18)
	Equals -> Match '=' Maths                          (19)
	Equals -> Match '=' Equals                         (20)
	Equals -> Match '=' Cond                           (21)
	Equals -> var '=' Maths                            (22)
	Equals -> var '=' B                                (23)
	T -> boolType                                      (24)
	T -> intType                                       (25)
	B -> trueValue                                     (26)
	B -> falseValue                                    (27)
	Var -> var ':' T                                   (28)
	VarInit -> Var '=' intValue                        (29)
	VarInit -> Var '=' B                               (30)
	VarInit -> Var '=' var                             (31)
	Match -> '[' ']'                                   (32)
	Match -> '[' eof ']'                               (33)
	Match -> '[' Var ']'                               (34)
	Match -> '[' Var ',' MatchRec                      (35)
	MatchRec -> Var ']'                                (36)
	MatchRec -> Var ',' MatchRec                       (37)
	OutPattern -> '[' ']'                              (38)
	OutPattern -> '[' Maths ',' OutPatternRec          (39)
	OutPattern -> '[' Maths ']'                        (40)
	OutPatternRec -> Maths ']'                         (41)
	OutPatternRec -> Maths ',' OutPatternRec           (42)
	Comparables -> Maths                               (43)
	Comparables -> B                                   (44)
	ComparableExp -> ComparableExp '==' ComparableExp   (45)
	ComparableExp -> ComparableExp '<' ComparableExp   (46)
	ComparableExp -> ComparableExp '>' ComparableExp   (47)
	ComparableExp -> '!' ComparableExp                 (48)
	ComparableExp -> '(' ComparableExp ')'             (49)
	ComparableExp -> Comparables                       (50)
	Cond -> if '(' ComparableExp ')' ':' Exp else ':' Exp   (51)
	FuncBodyInitArea -> '{' '}'                        (52)
	FuncBodyInitArea -> '{' VarInit ';' '}'            (53)
	FuncBodyInitArea -> '{' VarInit ';' FuncBodyInitAreaRec   (54)
	FuncBodyInitAreaRec -> VarInit ';' '}'             (55)
	FuncBodyInitAreaRec -> VarInit ';' FuncBodyInitAreaRec   (56)
	Main -> main ':' stdin '>>' funcName '>>' MainRec   (57)
	Main -> main ':' stdin '>>' funcName '>>' stdout   (58)
	MainRec -> funcName '>>' stdout                    (59)
	MainRec -> funcName '>>' MainRec                   (60)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	intValue       { TokenIntValue _ $$ }
	var            { TokenVar _ $$ }
	funcName       { TokenFuncName _ $$ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	':'            { TokenColon _ }
	'['            { TokenLBracket _ }
	']'            { TokenRBracket _ }
	'{'            { TokenLCurlyBracket _ }
	'}'            { TokenRCurlyBracket _ }
	','            { TokenComma _ }
	'>>'           { TokenPipe _ }
	intType        { TokenTypeInt _ }
	eof            { TokenEOF _ }
	boolType       { TokenTypeBool _ }
	';'            { TokenSemiColon _ }
	if             { TokenIf _ }
	else           { TokenElse _ }
	main           { TokenMain _ }
	trueValue      { TokenTrueValue _ }
	falseValue     { TokenFalseValue _ }
	'=='           { TokenCompare _ }
	'!'            { TokenNot _ }
	'<'            { TokenSmallerThan _ }
	'>'            { TokenGreaterThan _ }
	stdin          { TokenStdin _ }
	stdout         { TokenStdout _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	prods           rules 1, 2
	FuncDeclaration rules 3, 4
	Exp             rules 5, 6, 7, 8, 9, 10
	Maths           rules 11, 12, 13, 14, 15, 16, 17
	Equals          rules 18, 19, 20, 21, 22, 23
	T               rules 24, 25
	B               rules 26, 27
	Var             rule  28
	VarInit         rules 29, 30, 31
	Match           rules 32, 33, 34, 35
	MatchRec        rules 36, 37
	OutPattern      rules 38, 39, 40
	OutPatternRec   rules 41, 42
	Comparables     rules 43, 44
	ComparableExp   rules 45, 46, 47, 48, 49, 50
	Cond            rule  51
	FuncBodyInitArea rules 52, 53, 54
	FuncBodyInitAreaRec rules 55, 56
	Main            rules 57, 58
	MainRec         rules 59, 60

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	funcName       shift, and enter state 4
	main           shift, and enter state 5

	prods          goto state 6
	FuncDeclarationgoto state 2
	Main           goto state 3

State 1


	funcName       shift, and enter state 4
	main           shift, and enter state 5

	FuncDeclarationgoto state 2
	Main           goto state 3

State 2

	prods -> FuncDeclaration .                          (rule 1)

	funcName       reduce using rule 1
	main           reduce using rule 1
	%eof           reduce using rule 1


State 3

	FuncDeclaration -> Main .                           (rule 4)

	funcName       reduce using rule 4
	main           reduce using rule 4
	%eof           reduce using rule 4


State 4

	FuncDeclaration -> funcName . ':' FuncBodyInitArea Exp    (rule 3)

	':'            shift, and enter state 9


State 5

	Main -> main . ':' stdin '>>' funcName '>>' MainRec    (rule 57)
	Main -> main . ':' stdin '>>' funcName '>>' stdout    (rule 58)

	':'            shift, and enter state 8


State 6

	%start_parseCalc -> prods .                         (rule 0)
	prods -> prods . FuncDeclaration                    (rule 2)

	funcName       shift, and enter state 4
	main           shift, and enter state 5
	%eof           accept

	FuncDeclarationgoto state 7
	Main           goto state 3

State 7

	prods -> prods FuncDeclaration .                    (rule 2)

	funcName       reduce using rule 2
	main           reduce using rule 2
	%eof           reduce using rule 2


State 8

	Main -> main ':' . stdin '>>' funcName '>>' MainRec    (rule 57)
	Main -> main ':' . stdin '>>' funcName '>>' stdout    (rule 58)

	stdin          shift, and enter state 12


State 9

	FuncDeclaration -> funcName ':' . FuncBodyInitArea Exp    (rule 3)

	'{'            shift, and enter state 11

	FuncBodyInitAreagoto state 10

State 10

	FuncDeclaration -> funcName ':' FuncBodyInitArea . Exp    (rule 3)

	var            shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	if             shift, and enter state 26

	Exp            goto state 18
	Equals         goto state 19
	Match          goto state 20
	OutPattern     goto state 21
	Cond           goto state 22

State 11

	FuncBodyInitArea -> '{' . '}'                       (rule 52)
	FuncBodyInitArea -> '{' . VarInit ';' '}'           (rule 53)
	FuncBodyInitArea -> '{' . VarInit ';' FuncBodyInitAreaRec    (rule 54)

	var            shift, and enter state 16
	'}'            shift, and enter state 17

	Var            goto state 14
	VarInit        goto state 15

State 12

	Main -> main ':' stdin . '>>' funcName '>>' MainRec    (rule 57)
	Main -> main ':' stdin . '>>' funcName '>>' stdout    (rule 58)

	'>>'           shift, and enter state 13


State 13

	Main -> main ':' stdin '>>' . funcName '>>' MainRec    (rule 57)
	Main -> main ':' stdin '>>' . funcName '>>' stdout    (rule 58)

	funcName       shift, and enter state 42


State 14

	VarInit -> Var . '=' intValue                       (rule 29)
	VarInit -> Var . '=' B                              (rule 30)
	VarInit -> Var . '=' var                            (rule 31)

	'='            shift, and enter state 41


State 15

	FuncBodyInitArea -> '{' VarInit . ';' '}'           (rule 53)
	FuncBodyInitArea -> '{' VarInit . ';' FuncBodyInitAreaRec    (rule 54)

	';'            shift, and enter state 40


State 16

	Var -> var . ':' T                                  (rule 28)

	':'            shift, and enter state 39


State 17

	FuncBodyInitArea -> '{' '}' .                       (rule 52)

	var            reduce using rule 52
	'('            reduce using rule 52
	'['            reduce using rule 52
	if             reduce using rule 52


State 18

	FuncDeclaration -> funcName ':' FuncBodyInitArea Exp .    (rule 3)
	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)

	funcName       reduce using rule 3
	';'            shift, and enter state 38
	main           reduce using rule 3
	%eof           reduce using rule 3


State 19

	Exp -> Equals .                                     (rule 6)

	funcName       reduce using rule 6
	')'            reduce using rule 6
	';'            reduce using rule 6
	else           reduce using rule 6
	main           reduce using rule 6
	%eof           reduce using rule 6


State 20

	Equals -> Match . '=' OutPattern                    (rule 18)
	Equals -> Match . '=' Maths                         (rule 19)
	Equals -> Match . '=' Equals                        (rule 20)
	Equals -> Match . '=' Cond                          (rule 21)

	'='            shift, and enter state 37


State 21

	Exp -> OutPattern .                                 (rule 7)

	funcName       reduce using rule 7
	')'            reduce using rule 7
	';'            reduce using rule 7
	else           reduce using rule 7
	main           reduce using rule 7
	%eof           reduce using rule 7


State 22

	Exp -> Cond .                                       (rule 5)

	funcName       reduce using rule 5
	')'            reduce using rule 5
	';'            reduce using rule 5
	else           reduce using rule 5
	main           reduce using rule 5
	%eof           reduce using rule 5


State 23

	Equals -> var . '=' Maths                           (rule 22)
	Equals -> var . '=' B                               (rule 23)

	'='            shift, and enter state 36


State 24

	Exp -> '(' . Exp ')'                                (rule 8)

	var            shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	if             shift, and enter state 26

	Exp            goto state 35
	Equals         goto state 19
	Match          goto state 20
	OutPattern     goto state 21
	Cond           goto state 22

State 25

	Match -> '[' . ']'                                  (rule 32)
	Match -> '[' . eof ']'                              (rule 33)
	Match -> '[' . Var ']'                              (rule 34)
	Match -> '[' . Var ',' MatchRec                     (rule 35)
	OutPattern -> '[' . ']'                             (rule 38)
	OutPattern -> '[' . Maths ',' OutPatternRec         (rule 39)
	OutPattern -> '[' . Maths ']'                       (rule 40)

	intValue       shift, and enter state 30
	var            shift, and enter state 31
	'('            shift, and enter state 32
	']'            shift, and enter state 33
	eof            shift, and enter state 34

	Maths          goto state 28
	Var            goto state 29

State 26

	Cond -> if . '(' ComparableExp ')' ':' Exp else ':' Exp    (rule 51)

	'('            shift, and enter state 27


State 27

	Cond -> if '(' . ComparableExp ')' ':' Exp else ':' Exp    (rule 51)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 79
	trueValue      shift, and enter state 47
	falseValue     shift, and enter state 48
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 78

State 28

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	OutPattern -> '[' Maths . ',' OutPatternRec         (rule 39)
	OutPattern -> '[' Maths . ']'                       (rule 40)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	']'            shift, and enter state 73
	','            shift, and enter state 74


State 29

	Match -> '[' Var . ']'                              (rule 34)
	Match -> '[' Var . ',' MatchRec                     (rule 35)

	']'            shift, and enter state 67
	','            shift, and enter state 68


State 30

	Maths -> intValue .                                 (rule 16)

	funcName       reduce using rule 16
	'+'            reduce using rule 16
	'-'            reduce using rule 16
	'*'            reduce using rule 16
	'/'            reduce using rule 16
	')'            reduce using rule 16
	']'            reduce using rule 16
	','            reduce using rule 16
	';'            reduce using rule 16
	else           reduce using rule 16
	main           reduce using rule 16
	'=='           reduce using rule 16
	'<'            reduce using rule 16
	'>'            reduce using rule 16
	%eof           reduce using rule 16


State 31

	Maths -> var .                                      (rule 17)
	Var -> var . ':' T                                  (rule 28)

	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	':'            shift, and enter state 39
	']'            reduce using rule 17
	','            reduce using rule 17


State 32

	Maths -> '(' . Maths ')'                            (rule 15)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 32

	Maths          goto state 66

State 33

	Match -> '[' ']' .                                  (rule 32)
	OutPattern -> '[' ']' .                             (rule 38)

	funcName       reduce using rule 38
	'='            reduce using rule 32
	')'            reduce using rule 38
	';'            reduce using rule 38
	else           reduce using rule 38
	main           reduce using rule 38
	%eof           reduce using rule 38


State 34

	Match -> '[' eof . ']'                              (rule 33)

	']'            shift, and enter state 65


State 35

	Exp -> '(' Exp . ')'                                (rule 8)
	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)

	')'            shift, and enter state 64
	';'            shift, and enter state 38


State 36

	Equals -> var '=' . Maths                           (rule 22)
	Equals -> var '=' . B                               (rule 23)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 32
	trueValue      shift, and enter state 47
	falseValue     shift, and enter state 48

	Maths          goto state 61
	B              goto state 62

State 37

	Equals -> Match '=' . OutPattern                    (rule 18)
	Equals -> Match '=' . Maths                         (rule 19)
	Equals -> Match '=' . Equals                        (rule 20)
	Equals -> Match '=' . Cond                          (rule 21)

	intValue       shift, and enter state 30
	var            shift, and enter state 60
	'('            shift, and enter state 32
	'['            shift, and enter state 25
	if             shift, and enter state 26

	Maths          goto state 56
	Equals         goto state 57
	Match          goto state 20
	OutPattern     goto state 58
	Cond           goto state 59

State 38

	Exp -> Exp ';' . Exp                                (rule 9)
	Exp -> Exp ';' .                                    (rule 10)

	var            shift, and enter state 23
	funcName       reduce using rule 10
	'('            shift, and enter state 24
	')'            reduce using rule 10
	'['            shift, and enter state 25
	';'            reduce using rule 10
	if             shift, and enter state 26
	else           reduce using rule 10
	main           reduce using rule 10
	%eof           reduce using rule 10

	Exp            goto state 55
	Equals         goto state 19
	Match          goto state 20
	OutPattern     goto state 21
	Cond           goto state 22

State 39

	Var -> var ':' . T                                  (rule 28)

	intType        shift, and enter state 53
	boolType       shift, and enter state 54

	T              goto state 52

State 40

	FuncBodyInitArea -> '{' VarInit ';' . '}'           (rule 53)
	FuncBodyInitArea -> '{' VarInit ';' . FuncBodyInitAreaRec    (rule 54)

	var            shift, and enter state 16
	'}'            shift, and enter state 51

	Var            goto state 14
	VarInit        goto state 49
	FuncBodyInitAreaRecgoto state 50

State 41

	VarInit -> Var '=' . intValue                       (rule 29)
	VarInit -> Var '=' . B                              (rule 30)
	VarInit -> Var '=' . var                            (rule 31)

	intValue       shift, and enter state 45
	var            shift, and enter state 46
	trueValue      shift, and enter state 47
	falseValue     shift, and enter state 48

	B              goto state 44

State 42

	Main -> main ':' stdin '>>' funcName . '>>' MainRec    (rule 57)
	Main -> main ':' stdin '>>' funcName . '>>' stdout    (rule 58)

	'>>'           shift, and enter state 43


State 43

	Main -> main ':' stdin '>>' funcName '>>' . MainRec    (rule 57)
	Main -> main ':' stdin '>>' funcName '>>' . stdout    (rule 58)

	funcName       shift, and enter state 99
	stdout         shift, and enter state 100

	MainRec        goto state 98

State 44

	VarInit -> Var '=' B .                              (rule 30)

	';'            reduce using rule 30


State 45

	VarInit -> Var '=' intValue .                       (rule 29)

	';'            reduce using rule 29


State 46

	VarInit -> Var '=' var .                            (rule 31)

	';'            reduce using rule 31


State 47

	B -> trueValue .                                    (rule 26)

	funcName       reduce using rule 26
	')'            reduce using rule 26
	';'            reduce using rule 26
	else           reduce using rule 26
	main           reduce using rule 26
	'=='           reduce using rule 26
	'<'            reduce using rule 26
	'>'            reduce using rule 26
	%eof           reduce using rule 26


State 48

	B -> falseValue .                                   (rule 27)

	funcName       reduce using rule 27
	')'            reduce using rule 27
	';'            reduce using rule 27
	else           reduce using rule 27
	main           reduce using rule 27
	'=='           reduce using rule 27
	'<'            reduce using rule 27
	'>'            reduce using rule 27
	%eof           reduce using rule 27


State 49

	FuncBodyInitAreaRec -> VarInit . ';' '}'            (rule 55)
	FuncBodyInitAreaRec -> VarInit . ';' FuncBodyInitAreaRec    (rule 56)

	';'            shift, and enter state 97


State 50

	FuncBodyInitArea -> '{' VarInit ';' FuncBodyInitAreaRec .    (rule 54)

	var            reduce using rule 54
	'('            reduce using rule 54
	'['            reduce using rule 54
	if             reduce using rule 54


State 51

	FuncBodyInitArea -> '{' VarInit ';' '}' .           (rule 53)

	var            reduce using rule 53
	'('            reduce using rule 53
	'['            reduce using rule 53
	if             reduce using rule 53


State 52

	Var -> var ':' T .                                  (rule 28)

	'='            reduce using rule 28
	']'            reduce using rule 28
	','            reduce using rule 28


State 53

	T -> intType .                                      (rule 25)

	'='            reduce using rule 25
	']'            reduce using rule 25
	','            reduce using rule 25


State 54

	T -> boolType .                                     (rule 24)

	'='            reduce using rule 24
	']'            reduce using rule 24
	','            reduce using rule 24


State 55

	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp ';' Exp .                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)

	funcName       reduce using rule 9
	')'            reduce using rule 9
	';'            shift, and enter state 38
	else           reduce using rule 9
	main           reduce using rule 9
	%eof           reduce using rule 9


State 56

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Equals -> Match '=' Maths .                         (rule 19)

	funcName       reduce using rule 19
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	')'            reduce using rule 19
	';'            reduce using rule 19
	else           reduce using rule 19
	main           reduce using rule 19
	%eof           reduce using rule 19


State 57

	Equals -> Match '=' Equals .                        (rule 20)

	funcName       reduce using rule 20
	')'            reduce using rule 20
	';'            reduce using rule 20
	else           reduce using rule 20
	main           reduce using rule 20
	%eof           reduce using rule 20


State 58

	Equals -> Match '=' OutPattern .                    (rule 18)

	funcName       reduce using rule 18
	')'            reduce using rule 18
	';'            reduce using rule 18
	else           reduce using rule 18
	main           reduce using rule 18
	%eof           reduce using rule 18


State 59

	Equals -> Match '=' Cond .                          (rule 21)

	funcName       reduce using rule 21
	')'            reduce using rule 21
	';'            reduce using rule 21
	else           reduce using rule 21
	main           reduce using rule 21
	%eof           reduce using rule 21


State 60

	Maths -> var .                                      (rule 17)
	Equals -> var . '=' Maths                           (rule 22)
	Equals -> var . '=' B                               (rule 23)

	funcName       reduce using rule 17
	'='            shift, and enter state 36
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	')'            reduce using rule 17
	';'            reduce using rule 17
	else           reduce using rule 17
	main           reduce using rule 17
	%eof           reduce using rule 17


State 61

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Equals -> var '=' Maths .                           (rule 22)

	funcName       reduce using rule 22
	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	')'            reduce using rule 22
	';'            reduce using rule 22
	else           reduce using rule 22
	main           reduce using rule 22
	%eof           reduce using rule 22


State 62

	Equals -> var '=' B .                               (rule 23)

	funcName       reduce using rule 23
	')'            reduce using rule 23
	';'            reduce using rule 23
	else           reduce using rule 23
	main           reduce using rule 23
	%eof           reduce using rule 23


State 63

	Maths -> var .                                      (rule 17)

	funcName       reduce using rule 17
	'+'            reduce using rule 17
	'-'            reduce using rule 17
	'*'            reduce using rule 17
	'/'            reduce using rule 17
	')'            reduce using rule 17
	']'            reduce using rule 17
	','            reduce using rule 17
	';'            reduce using rule 17
	else           reduce using rule 17
	main           reduce using rule 17
	'=='           reduce using rule 17
	'<'            reduce using rule 17
	'>'            reduce using rule 17
	%eof           reduce using rule 17


State 64

	Exp -> '(' Exp ')' .                                (rule 8)

	funcName       reduce using rule 8
	')'            reduce using rule 8
	';'            reduce using rule 8
	else           reduce using rule 8
	main           reduce using rule 8
	%eof           reduce using rule 8


State 65

	Match -> '[' eof ']' .                              (rule 33)

	'='            reduce using rule 33


State 66

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Maths -> '(' Maths . ')'                            (rule 15)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	')'            shift, and enter state 96


State 67

	Match -> '[' Var ']' .                              (rule 34)

	'='            reduce using rule 34


State 68

	Match -> '[' Var ',' . MatchRec                     (rule 35)

	var            shift, and enter state 16

	Var            goto state 94
	MatchRec       goto state 95

State 69

	Maths -> Maths '+' . Maths                          (rule 11)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 32

	Maths          goto state 93

State 70

	Maths -> Maths '-' . Maths                          (rule 12)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 32

	Maths          goto state 92

State 71

	Maths -> Maths '*' . Maths                          (rule 13)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 32

	Maths          goto state 91

State 72

	Maths -> Maths '/' . Maths                          (rule 14)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 32

	Maths          goto state 90

State 73

	OutPattern -> '[' Maths ']' .                       (rule 40)

	funcName       reduce using rule 40
	')'            reduce using rule 40
	';'            reduce using rule 40
	else           reduce using rule 40
	main           reduce using rule 40
	%eof           reduce using rule 40


State 74

	OutPattern -> '[' Maths ',' . OutPatternRec         (rule 39)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 32

	Maths          goto state 88
	OutPatternRec  goto state 89

State 75

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Comparables -> Maths .                              (rule 43)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	')'            reduce using rule 43
	'=='           reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43


State 76

	Comparables -> B .                                  (rule 44)

	')'            reduce using rule 44
	'=='           reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44


State 77

	ComparableExp -> Comparables .                      (rule 50)

	')'            reduce using rule 50
	'=='           reduce using rule 50
	'<'            reduce using rule 50
	'>'            reduce using rule 50


State 78

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 45)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 46)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 47)
	Cond -> if '(' ComparableExp . ')' ':' Exp else ':' Exp    (rule 51)

	')'            shift, and enter state 84
	'=='           shift, and enter state 85
	'<'            shift, and enter state 86
	'>'            shift, and enter state 87


State 79

	Maths -> '(' . Maths ')'                            (rule 15)
	ComparableExp -> '(' . ComparableExp ')'            (rule 49)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 79
	trueValue      shift, and enter state 47
	falseValue     shift, and enter state 48
	'!'            shift, and enter state 80

	Maths          goto state 82
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 83

State 80

	ComparableExp -> '!' . ComparableExp                (rule 48)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 79
	trueValue      shift, and enter state 47
	falseValue     shift, and enter state 48
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 81

State 81

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 45)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 46)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 47)
	ComparableExp -> '!' ComparableExp .                (rule 48)

	')'            reduce using rule 48
	'=='           reduce using rule 48
	'<'            reduce using rule 48
	'>'            reduce using rule 48


State 82

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Maths -> '(' Maths . ')'                            (rule 15)
	Comparables -> Maths .                              (rule 43)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	')'            shift, and enter state 96
			(reduce using rule 43)

	'=='           reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43


State 83

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 45)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 46)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 47)
	ComparableExp -> '(' ComparableExp . ')'            (rule 49)

	')'            shift, and enter state 112
	'=='           shift, and enter state 85
	'<'            shift, and enter state 86
	'>'            shift, and enter state 87


State 84

	Cond -> if '(' ComparableExp ')' . ':' Exp else ':' Exp    (rule 51)

	':'            shift, and enter state 111


State 85

	ComparableExp -> ComparableExp '==' . ComparableExp    (rule 45)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 79
	trueValue      shift, and enter state 47
	falseValue     shift, and enter state 48
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 110

State 86

	ComparableExp -> ComparableExp '<' . ComparableExp    (rule 46)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 79
	trueValue      shift, and enter state 47
	falseValue     shift, and enter state 48
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 109

State 87

	ComparableExp -> ComparableExp '>' . ComparableExp    (rule 47)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 79
	trueValue      shift, and enter state 47
	falseValue     shift, and enter state 48
	'!'            shift, and enter state 80

	Maths          goto state 75
	B              goto state 76
	Comparables    goto state 77
	ComparableExp  goto state 108

State 88

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	OutPatternRec -> Maths . ']'                        (rule 41)
	OutPatternRec -> Maths . ',' OutPatternRec          (rule 42)

	'+'            shift, and enter state 69
	'-'            shift, and enter state 70
	'*'            shift, and enter state 71
	'/'            shift, and enter state 72
	']'            shift, and enter state 106
	','            shift, and enter state 107


State 89

	OutPattern -> '[' Maths ',' OutPatternRec .         (rule 39)

	funcName       reduce using rule 39
	')'            reduce using rule 39
	';'            reduce using rule 39
	else           reduce using rule 39
	main           reduce using rule 39
	%eof           reduce using rule 39


State 90

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)
	Maths -> Maths '/' Maths .                          (rule 14)

	funcName       reduce using rule 14
	'+'            reduce using rule 14
	'-'            reduce using rule 14
	'*'            reduce using rule 14
	'/'            reduce using rule 14
	')'            reduce using rule 14
	']'            reduce using rule 14
	','            reduce using rule 14
	';'            reduce using rule 14
	else           reduce using rule 14
	main           reduce using rule 14
	'=='           reduce using rule 14
	'<'            reduce using rule 14
	'>'            reduce using rule 14
	%eof           reduce using rule 14


State 91

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths '*' Maths .                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)

	funcName       reduce using rule 13
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	else           reduce using rule 13
	main           reduce using rule 13
	'=='           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	%eof           reduce using rule 13


State 92

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths '-' Maths .                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)

	funcName       reduce using rule 12
	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12
	else           reduce using rule 12
	main           reduce using rule 12
	'=='           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	%eof           reduce using rule 12


State 93

	Maths -> Maths . '+' Maths                          (rule 11)
	Maths -> Maths '+' Maths .                          (rule 11)
	Maths -> Maths . '-' Maths                          (rule 12)
	Maths -> Maths . '*' Maths                          (rule 13)
	Maths -> Maths . '/' Maths                          (rule 14)

	funcName       reduce using rule 11
	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	else           reduce using rule 11
	main           reduce using rule 11
	'=='           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	%eof           reduce using rule 11


State 94

	MatchRec -> Var . ']'                               (rule 36)
	MatchRec -> Var . ',' MatchRec                      (rule 37)

	']'            shift, and enter state 104
	','            shift, and enter state 105


State 95

	Match -> '[' Var ',' MatchRec .                     (rule 35)

	'='            reduce using rule 35


State 96

	Maths -> '(' Maths ')' .                            (rule 15)

	funcName       reduce using rule 15
	'+'            reduce using rule 15
	'-'            reduce using rule 15
	'*'            reduce using rule 15
	'/'            reduce using rule 15
	')'            reduce using rule 15
	']'            reduce using rule 15
	','            reduce using rule 15
	';'            reduce using rule 15
	else           reduce using rule 15
	main           reduce using rule 15
	'=='           reduce using rule 15
	'<'            reduce using rule 15
	'>'            reduce using rule 15
	%eof           reduce using rule 15


State 97

	FuncBodyInitAreaRec -> VarInit ';' . '}'            (rule 55)
	FuncBodyInitAreaRec -> VarInit ';' . FuncBodyInitAreaRec    (rule 56)

	var            shift, and enter state 16
	'}'            shift, and enter state 103

	Var            goto state 14
	VarInit        goto state 49
	FuncBodyInitAreaRecgoto state 102

State 98

	Main -> main ':' stdin '>>' funcName '>>' MainRec .    (rule 57)

	funcName       reduce using rule 57
	main           reduce using rule 57
	%eof           reduce using rule 57


State 99

	MainRec -> funcName . '>>' stdout                   (rule 59)
	MainRec -> funcName . '>>' MainRec                  (rule 60)

	'>>'           shift, and enter state 101


State 100

	Main -> main ':' stdin '>>' funcName '>>' stdout .    (rule 58)

	funcName       reduce using rule 58
	main           reduce using rule 58
	%eof           reduce using rule 58


State 101

	MainRec -> funcName '>>' . stdout                   (rule 59)
	MainRec -> funcName '>>' . MainRec                  (rule 60)

	funcName       shift, and enter state 99
	stdout         shift, and enter state 117

	MainRec        goto state 116

State 102

	FuncBodyInitAreaRec -> VarInit ';' FuncBodyInitAreaRec .    (rule 56)

	var            reduce using rule 56
	'('            reduce using rule 56
	'['            reduce using rule 56
	if             reduce using rule 56


State 103

	FuncBodyInitAreaRec -> VarInit ';' '}' .            (rule 55)

	var            reduce using rule 55
	'('            reduce using rule 55
	'['            reduce using rule 55
	if             reduce using rule 55


State 104

	MatchRec -> Var ']' .                               (rule 36)

	'='            reduce using rule 36


State 105

	MatchRec -> Var ',' . MatchRec                      (rule 37)

	var            shift, and enter state 16

	Var            goto state 94
	MatchRec       goto state 115

State 106

	OutPatternRec -> Maths ']' .                        (rule 41)

	funcName       reduce using rule 41
	')'            reduce using rule 41
	';'            reduce using rule 41
	else           reduce using rule 41
	main           reduce using rule 41
	%eof           reduce using rule 41


State 107

	OutPatternRec -> Maths ',' . OutPatternRec          (rule 42)

	intValue       shift, and enter state 30
	var            shift, and enter state 63
	'('            shift, and enter state 32

	Maths          goto state 88
	OutPatternRec  goto state 114

State 108

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 45)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 46)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 47)
	ComparableExp -> ComparableExp '>' ComparableExp .    (rule 47)

	')'            reduce using rule 47
	'=='           reduce using rule 47
	'<'            reduce using rule 47
	'>'            reduce using rule 47


State 109

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 45)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 46)
	ComparableExp -> ComparableExp '<' ComparableExp .    (rule 46)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 47)

	')'            reduce using rule 46
	'=='           reduce using rule 46
	'<'            reduce using rule 46
	'>'            reduce using rule 46


State 110

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 45)
	ComparableExp -> ComparableExp '==' ComparableExp .    (rule 45)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 46)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 47)

	')'            reduce using rule 45
	'=='           reduce using rule 45
	'<'            reduce using rule 45
	'>'            reduce using rule 45


State 111

	Cond -> if '(' ComparableExp ')' ':' . Exp else ':' Exp    (rule 51)

	var            shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	if             shift, and enter state 26

	Exp            goto state 113
	Equals         goto state 19
	Match          goto state 20
	OutPattern     goto state 21
	Cond           goto state 22

State 112

	ComparableExp -> '(' ComparableExp ')' .            (rule 49)

	')'            reduce using rule 49
	'=='           reduce using rule 49
	'<'            reduce using rule 49
	'>'            reduce using rule 49


State 113

	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)
	Cond -> if '(' ComparableExp ')' ':' Exp . else ':' Exp    (rule 51)

	';'            shift, and enter state 38
	else           shift, and enter state 118


State 114

	OutPatternRec -> Maths ',' OutPatternRec .          (rule 42)

	funcName       reduce using rule 42
	')'            reduce using rule 42
	';'            reduce using rule 42
	else           reduce using rule 42
	main           reduce using rule 42
	%eof           reduce using rule 42


State 115

	MatchRec -> Var ',' MatchRec .                      (rule 37)

	'='            reduce using rule 37


State 116

	MainRec -> funcName '>>' MainRec .                  (rule 60)

	funcName       reduce using rule 60
	main           reduce using rule 60
	%eof           reduce using rule 60


State 117

	MainRec -> funcName '>>' stdout .                   (rule 59)

	funcName       reduce using rule 59
	main           reduce using rule 59
	%eof           reduce using rule 59


State 118

	Cond -> if '(' ComparableExp ')' ':' Exp else . ':' Exp    (rule 51)

	':'            shift, and enter state 119


State 119

	Cond -> if '(' ComparableExp ')' ':' Exp else ':' . Exp    (rule 51)

	var            shift, and enter state 23
	'('            shift, and enter state 24
	'['            shift, and enter state 25
	if             shift, and enter state 26

	Exp            goto state 120
	Equals         goto state 19
	Match          goto state 20
	OutPattern     goto state 21
	Cond           goto state 22

State 120

	Exp -> Exp . ';' Exp                                (rule 9)
	Exp -> Exp . ';'                                    (rule 10)
	Cond -> if '(' ComparableExp ')' ':' Exp else ':' Exp .    (rule 51)

	funcName       reduce using rule 51
	')'            reduce using rule 51
	';'            reduce using rule 51
	else           reduce using rule 51
	main           reduce using rule 51
	%eof           reduce using rule 51


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 61
Number of terminals: 32
Number of non-terminals: 21
Number of states: 121
