-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Grammar.y
-----------------------------------------------------------------------------

state 72 contains 1 shift/reduce conflicts.

terminal '>>' is unused
terminal main is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseCalc -> FuncDeclaration                (0)
	FuncDeclaration -> funcName ':' FuncBodyInitArea Exp   (1)
	Exp -> Cond                                        (2)
	Exp -> Equals                                      (3)
	Exp -> OutPattern                                  (4)
	Exp -> '(' Exp ')'                                 (5)
	Exp -> Exp ';' Exp                                 (6)
	Maths -> Maths '+' Maths                           (7)
	Maths -> Maths '-' Maths                           (8)
	Maths -> Maths '*' Maths                           (9)
	Maths -> Maths '/' Maths                           (10)
	Maths -> '(' Maths ')'                             (11)
	Maths -> intValue                                  (12)
	Maths -> var                                       (13)
	Equals -> Match '=' OutPattern                     (14)
	Equals -> Match '=' Maths                          (15)
	Equals -> Match '=' Equals                         (16)
	Equals -> var '=' Maths                            (17)
	Equals -> var '=' B                                (18)
	T -> boolType                                      (19)
	T -> intType                                       (20)
	B -> trueValue                                     (21)
	B -> falseValue                                    (22)
	Var -> var ':' T                                   (23)
	VarInit -> Var '=' intValue                        (24)
	VarInit -> Var '=' B                               (25)
	VarInit -> Var '=' var                             (26)
	Match -> '[' ']'                                   (27)
	Match -> '[' eof ']'                               (28)
	Match -> '[' Var ']'                               (29)
	Match -> '[' Var ',' MatchRec                      (30)
	MatchRec -> Var ']'                                (31)
	MatchRec -> Var ',' MatchRec                       (32)
	OutPattern -> '[' ']'                              (33)
	OutPattern -> '[' Maths ',' OutPatternRec          (34)
	OutPattern -> '[' Maths ']'                        (35)
	OutPatternRec -> Maths ']'                         (36)
	OutPatternRec -> Maths ',' OutPatternRec           (37)
	Comparables -> Maths                               (38)
	Comparables -> B                                   (39)
	ComparableExp -> ComparableExp '==' ComparableExp   (40)
	ComparableExp -> ComparableExp '<' ComparableExp   (41)
	ComparableExp -> ComparableExp '>' ComparableExp   (42)
	ComparableExp -> '!' ComparableExp                 (43)
	ComparableExp -> '(' ComparableExp ')'             (44)
	ComparableExp -> Comparables                       (45)
	Cond -> if '(' ComparableExp ')' ':' Exp else ':' Exp   (46)
	FuncBodyInitArea -> '{' '}'                        (47)
	FuncBodyInitArea -> '{' VarInit '}'                (48)
	FuncBodyInitArea -> '{' VarInit ',' FuncBodyInitAreaRec   (49)
	FuncBodyInitAreaRec -> VarInit '}'                 (50)
	FuncBodyInitAreaRec -> VarInit ',' FuncBodyInitAreaRec   (51)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	intValue       { TokenIntValue _ $$ }
	var            { TokenVar _ $$ }
	funcName       { TokenFuncName _ $$ }
	'='            { TokenEq _ }
	'+'            { TokenPlus _ }
	'-'            { TokenMinus _ }
	'*'            { TokenTimes _ }
	'/'            { TokenDiv _ }
	'('            { TokenLParen _ }
	')'            { TokenRParen _ }
	':'            { TokenColon _ }
	'['            { TokenLBracket _ }
	']'            { TokenRBracket _ }
	'{'            { TokenLCurlyBracket _ }
	'}'            { TokenRCurlyBracket _ }
	','            { TokenComma _ }
	'>>'           { TokenPipe _ }
	intType        { TokenTypeInt _ }
	eof            { TokenEOF _ }
	boolType       { TokenTypeBool _ }
	';'            { TokenSemiColon _ }
	if             { TokenIf _ }
	else           { TokenElse _ }
	main           { TokenMain _ }
	trueValue      { TokenTrueValue _ }
	falseValue     { TokenFalseValue _ }
	'=='           { TokenCompare _ }
	'!'            { TokenNot _ }
	'<'            { TokenSmallerThan _ }
	'>'            { TokenGreaterThan _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseCalc rule  0
	FuncDeclaration rule  1
	Exp             rules 2, 3, 4, 5, 6
	Maths           rules 7, 8, 9, 10, 11, 12, 13
	Equals          rules 14, 15, 16, 17, 18
	T               rules 19, 20
	B               rules 21, 22
	Var             rule  23
	VarInit         rules 24, 25, 26
	Match           rules 27, 28, 29, 30
	MatchRec        rules 31, 32
	OutPattern      rules 33, 34, 35
	OutPatternRec   rules 36, 37
	Comparables     rules 38, 39
	ComparableExp   rules 40, 41, 42, 43, 44, 45
	Cond            rule  46
	FuncBodyInitArea rules 47, 48, 49
	FuncBodyInitAreaRec rules 50, 51

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	funcName       shift, and enter state 2

	FuncDeclarationgoto state 3

State 1


	funcName       shift, and enter state 2


State 2

	FuncDeclaration -> funcName . ':' FuncBodyInitArea Exp    (rule 1)

	':'            shift, and enter state 4


State 3

	%start_parseCalc -> FuncDeclaration .               (rule 0)

	%eof           accept


State 4

	FuncDeclaration -> funcName ':' . FuncBodyInitArea Exp    (rule 1)

	'{'            shift, and enter state 6

	FuncBodyInitAreagoto state 5

State 5

	FuncDeclaration -> funcName ':' FuncBodyInitArea . Exp    (rule 1)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	'['            shift, and enter state 18
	if             shift, and enter state 19

	Exp            goto state 11
	Equals         goto state 12
	Match          goto state 13
	OutPattern     goto state 14
	Cond           goto state 15

State 6

	FuncBodyInitArea -> '{' . '}'                       (rule 47)
	FuncBodyInitArea -> '{' . VarInit '}'               (rule 48)
	FuncBodyInitArea -> '{' . VarInit ',' FuncBodyInitAreaRec    (rule 49)

	var            shift, and enter state 9
	'}'            shift, and enter state 10

	Var            goto state 7
	VarInit        goto state 8

State 7

	VarInit -> Var . '=' intValue                       (rule 24)
	VarInit -> Var . '=' B                              (rule 25)
	VarInit -> Var . '=' var                            (rule 26)

	'='            shift, and enter state 35


State 8

	FuncBodyInitArea -> '{' VarInit . '}'               (rule 48)
	FuncBodyInitArea -> '{' VarInit . ',' FuncBodyInitAreaRec    (rule 49)

	'}'            shift, and enter state 33
	','            shift, and enter state 34


State 9

	Var -> var . ':' T                                  (rule 23)

	':'            shift, and enter state 32


State 10

	FuncBodyInitArea -> '{' '}' .                       (rule 47)

	var            reduce using rule 47
	'('            reduce using rule 47
	'['            reduce using rule 47
	if             reduce using rule 47


State 11

	FuncDeclaration -> funcName ':' FuncBodyInitArea Exp .    (rule 1)
	Exp -> Exp . ';' Exp                                (rule 6)

	';'            shift, and enter state 31
	%eof           reduce using rule 1


State 12

	Exp -> Equals .                                     (rule 3)

	')'            reduce using rule 3
	';'            reduce using rule 3
	else           reduce using rule 3
	%eof           reduce using rule 3


State 13

	Equals -> Match . '=' OutPattern                    (rule 14)
	Equals -> Match . '=' Maths                         (rule 15)
	Equals -> Match . '=' Equals                        (rule 16)

	'='            shift, and enter state 30


State 14

	Exp -> OutPattern .                                 (rule 4)

	')'            reduce using rule 4
	';'            reduce using rule 4
	else           reduce using rule 4
	%eof           reduce using rule 4


State 15

	Exp -> Cond .                                       (rule 2)

	')'            reduce using rule 2
	';'            reduce using rule 2
	else           reduce using rule 2
	%eof           reduce using rule 2


State 16

	Equals -> var . '=' Maths                           (rule 17)
	Equals -> var . '=' B                               (rule 18)

	'='            shift, and enter state 29


State 17

	Exp -> '(' . Exp ')'                                (rule 5)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	'['            shift, and enter state 18
	if             shift, and enter state 19

	Exp            goto state 28
	Equals         goto state 12
	Match          goto state 13
	OutPattern     goto state 14
	Cond           goto state 15

State 18

	Match -> '[' . ']'                                  (rule 27)
	Match -> '[' . eof ']'                              (rule 28)
	Match -> '[' . Var ']'                              (rule 29)
	Match -> '[' . Var ',' MatchRec                     (rule 30)
	OutPattern -> '[' . ']'                             (rule 33)
	OutPattern -> '[' . Maths ',' OutPatternRec         (rule 34)
	OutPattern -> '[' . Maths ']'                       (rule 35)

	intValue       shift, and enter state 23
	var            shift, and enter state 24
	'('            shift, and enter state 25
	']'            shift, and enter state 26
	eof            shift, and enter state 27

	Maths          goto state 21
	Var            goto state 22

State 19

	Cond -> if . '(' ComparableExp ')' ':' Exp else ':' Exp    (rule 46)

	'('            shift, and enter state 20


State 20

	Cond -> if '(' . ComparableExp ')' ':' Exp else ':' Exp    (rule 46)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 69
	trueValue      shift, and enter state 39
	falseValue     shift, and enter state 40
	'!'            shift, and enter state 70

	Maths          goto state 65
	B              goto state 66
	Comparables    goto state 67
	ComparableExp  goto state 68

State 21

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)
	OutPattern -> '[' Maths . ',' OutPatternRec         (rule 34)
	OutPattern -> '[' Maths . ']'                       (rule 35)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	']'            shift, and enter state 63
	','            shift, and enter state 64


State 22

	Match -> '[' Var . ']'                              (rule 29)
	Match -> '[' Var . ',' MatchRec                     (rule 30)

	']'            shift, and enter state 57
	','            shift, and enter state 58


State 23

	Maths -> intValue .                                 (rule 12)

	'+'            reduce using rule 12
	'-'            reduce using rule 12
	'*'            reduce using rule 12
	'/'            reduce using rule 12
	')'            reduce using rule 12
	']'            reduce using rule 12
	','            reduce using rule 12
	';'            reduce using rule 12
	else           reduce using rule 12
	'=='           reduce using rule 12
	'<'            reduce using rule 12
	'>'            reduce using rule 12
	%eof           reduce using rule 12


State 24

	Maths -> var .                                      (rule 13)
	Var -> var . ':' T                                  (rule 23)

	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	':'            shift, and enter state 32
	']'            reduce using rule 13
	','            reduce using rule 13


State 25

	Maths -> '(' . Maths ')'                            (rule 11)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 25

	Maths          goto state 56

State 26

	Match -> '[' ']' .                                  (rule 27)
	OutPattern -> '[' ']' .                             (rule 33)

	'='            reduce using rule 27
	')'            reduce using rule 33
	';'            reduce using rule 33
	else           reduce using rule 33
	%eof           reduce using rule 33


State 27

	Match -> '[' eof . ']'                              (rule 28)

	']'            shift, and enter state 55


State 28

	Exp -> '(' Exp . ')'                                (rule 5)
	Exp -> Exp . ';' Exp                                (rule 6)

	')'            shift, and enter state 54
	';'            shift, and enter state 31


State 29

	Equals -> var '=' . Maths                           (rule 17)
	Equals -> var '=' . B                               (rule 18)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 25
	trueValue      shift, and enter state 39
	falseValue     shift, and enter state 40

	Maths          goto state 51
	B              goto state 52

State 30

	Equals -> Match '=' . OutPattern                    (rule 14)
	Equals -> Match '=' . Maths                         (rule 15)
	Equals -> Match '=' . Equals                        (rule 16)

	intValue       shift, and enter state 23
	var            shift, and enter state 50
	'('            shift, and enter state 25
	'['            shift, and enter state 18

	Maths          goto state 47
	Equals         goto state 48
	Match          goto state 13
	OutPattern     goto state 49

State 31

	Exp -> Exp ';' . Exp                                (rule 6)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	'['            shift, and enter state 18
	if             shift, and enter state 19

	Exp            goto state 46
	Equals         goto state 12
	Match          goto state 13
	OutPattern     goto state 14
	Cond           goto state 15

State 32

	Var -> var ':' . T                                  (rule 23)

	intType        shift, and enter state 44
	boolType       shift, and enter state 45

	T              goto state 43

State 33

	FuncBodyInitArea -> '{' VarInit '}' .               (rule 48)

	var            reduce using rule 48
	'('            reduce using rule 48
	'['            reduce using rule 48
	if             reduce using rule 48


State 34

	FuncBodyInitArea -> '{' VarInit ',' . FuncBodyInitAreaRec    (rule 49)

	var            shift, and enter state 9

	Var            goto state 7
	VarInit        goto state 41
	FuncBodyInitAreaRecgoto state 42

State 35

	VarInit -> Var '=' . intValue                       (rule 24)
	VarInit -> Var '=' . B                              (rule 25)
	VarInit -> Var '=' . var                            (rule 26)

	intValue       shift, and enter state 37
	var            shift, and enter state 38
	trueValue      shift, and enter state 39
	falseValue     shift, and enter state 40

	B              goto state 36

State 36

	VarInit -> Var '=' B .                              (rule 25)

	'}'            reduce using rule 25
	','            reduce using rule 25


State 37

	VarInit -> Var '=' intValue .                       (rule 24)

	'}'            reduce using rule 24
	','            reduce using rule 24


State 38

	VarInit -> Var '=' var .                            (rule 26)

	'}'            reduce using rule 26
	','            reduce using rule 26


State 39

	B -> trueValue .                                    (rule 21)

	')'            reduce using rule 21
	'}'            reduce using rule 21
	','            reduce using rule 21
	';'            reduce using rule 21
	else           reduce using rule 21
	'=='           reduce using rule 21
	'<'            reduce using rule 21
	'>'            reduce using rule 21
	%eof           reduce using rule 21


State 40

	B -> falseValue .                                   (rule 22)

	')'            reduce using rule 22
	'}'            reduce using rule 22
	','            reduce using rule 22
	';'            reduce using rule 22
	else           reduce using rule 22
	'=='           reduce using rule 22
	'<'            reduce using rule 22
	'>'            reduce using rule 22
	%eof           reduce using rule 22


State 41

	FuncBodyInitAreaRec -> VarInit . '}'                (rule 50)
	FuncBodyInitAreaRec -> VarInit . ',' FuncBodyInitAreaRec    (rule 51)

	'}'            shift, and enter state 87
	','            shift, and enter state 88


State 42

	FuncBodyInitArea -> '{' VarInit ',' FuncBodyInitAreaRec .    (rule 49)

	var            reduce using rule 49
	'('            reduce using rule 49
	'['            reduce using rule 49
	if             reduce using rule 49


State 43

	Var -> var ':' T .                                  (rule 23)

	'='            reduce using rule 23
	']'            reduce using rule 23
	','            reduce using rule 23


State 44

	T -> intType .                                      (rule 20)

	'='            reduce using rule 20
	']'            reduce using rule 20
	','            reduce using rule 20


State 45

	T -> boolType .                                     (rule 19)

	'='            reduce using rule 19
	']'            reduce using rule 19
	','            reduce using rule 19


State 46

	Exp -> Exp . ';' Exp                                (rule 6)
	Exp -> Exp ';' Exp .                                (rule 6)

	')'            reduce using rule 6
	';'            shift, and enter state 31
	else           reduce using rule 6
	%eof           reduce using rule 6


State 47

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)
	Equals -> Match '=' Maths .                         (rule 15)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	')'            reduce using rule 15
	';'            reduce using rule 15
	else           reduce using rule 15
	%eof           reduce using rule 15


State 48

	Equals -> Match '=' Equals .                        (rule 16)

	')'            reduce using rule 16
	';'            reduce using rule 16
	else           reduce using rule 16
	%eof           reduce using rule 16


State 49

	Equals -> Match '=' OutPattern .                    (rule 14)

	')'            reduce using rule 14
	';'            reduce using rule 14
	else           reduce using rule 14
	%eof           reduce using rule 14


State 50

	Maths -> var .                                      (rule 13)
	Equals -> var . '=' Maths                           (rule 17)
	Equals -> var . '=' B                               (rule 18)

	'='            shift, and enter state 29
	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	')'            reduce using rule 13
	';'            reduce using rule 13
	else           reduce using rule 13
	%eof           reduce using rule 13


State 51

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)
	Equals -> var '=' Maths .                           (rule 17)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	')'            reduce using rule 17
	';'            reduce using rule 17
	else           reduce using rule 17
	%eof           reduce using rule 17


State 52

	Equals -> var '=' B .                               (rule 18)

	')'            reduce using rule 18
	';'            reduce using rule 18
	else           reduce using rule 18
	%eof           reduce using rule 18


State 53

	Maths -> var .                                      (rule 13)

	'+'            reduce using rule 13
	'-'            reduce using rule 13
	'*'            reduce using rule 13
	'/'            reduce using rule 13
	')'            reduce using rule 13
	']'            reduce using rule 13
	','            reduce using rule 13
	';'            reduce using rule 13
	else           reduce using rule 13
	'=='           reduce using rule 13
	'<'            reduce using rule 13
	'>'            reduce using rule 13
	%eof           reduce using rule 13


State 54

	Exp -> '(' Exp ')' .                                (rule 5)

	')'            reduce using rule 5
	';'            reduce using rule 5
	else           reduce using rule 5
	%eof           reduce using rule 5


State 55

	Match -> '[' eof ']' .                              (rule 28)

	'='            reduce using rule 28


State 56

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)
	Maths -> '(' Maths . ')'                            (rule 11)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	')'            shift, and enter state 86


State 57

	Match -> '[' Var ']' .                              (rule 29)

	'='            reduce using rule 29


State 58

	Match -> '[' Var ',' . MatchRec                     (rule 30)

	var            shift, and enter state 9

	Var            goto state 84
	MatchRec       goto state 85

State 59

	Maths -> Maths '+' . Maths                          (rule 7)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 25

	Maths          goto state 83

State 60

	Maths -> Maths '-' . Maths                          (rule 8)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 25

	Maths          goto state 82

State 61

	Maths -> Maths '*' . Maths                          (rule 9)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 25

	Maths          goto state 81

State 62

	Maths -> Maths '/' . Maths                          (rule 10)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 25

	Maths          goto state 80

State 63

	OutPattern -> '[' Maths ']' .                       (rule 35)

	')'            reduce using rule 35
	';'            reduce using rule 35
	else           reduce using rule 35
	%eof           reduce using rule 35


State 64

	OutPattern -> '[' Maths ',' . OutPatternRec         (rule 34)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 25

	Maths          goto state 78
	OutPatternRec  goto state 79

State 65

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)
	Comparables -> Maths .                              (rule 38)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	')'            reduce using rule 38
	'=='           reduce using rule 38
	'<'            reduce using rule 38
	'>'            reduce using rule 38


State 66

	Comparables -> B .                                  (rule 39)

	')'            reduce using rule 39
	'=='           reduce using rule 39
	'<'            reduce using rule 39
	'>'            reduce using rule 39


State 67

	ComparableExp -> Comparables .                      (rule 45)

	')'            reduce using rule 45
	'=='           reduce using rule 45
	'<'            reduce using rule 45
	'>'            reduce using rule 45


State 68

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 41)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 42)
	Cond -> if '(' ComparableExp . ')' ':' Exp else ':' Exp    (rule 46)

	')'            shift, and enter state 74
	'=='           shift, and enter state 75
	'<'            shift, and enter state 76
	'>'            shift, and enter state 77


State 69

	Maths -> '(' . Maths ')'                            (rule 11)
	ComparableExp -> '(' . ComparableExp ')'            (rule 44)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 69
	trueValue      shift, and enter state 39
	falseValue     shift, and enter state 40
	'!'            shift, and enter state 70

	Maths          goto state 72
	B              goto state 66
	Comparables    goto state 67
	ComparableExp  goto state 73

State 70

	ComparableExp -> '!' . ComparableExp                (rule 43)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 69
	trueValue      shift, and enter state 39
	falseValue     shift, and enter state 40
	'!'            shift, and enter state 70

	Maths          goto state 65
	B              goto state 66
	Comparables    goto state 67
	ComparableExp  goto state 71

State 71

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 41)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 42)
	ComparableExp -> '!' ComparableExp .                (rule 43)

	')'            reduce using rule 43
	'=='           reduce using rule 43
	'<'            reduce using rule 43
	'>'            reduce using rule 43


State 72

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)
	Maths -> '(' Maths . ')'                            (rule 11)
	Comparables -> Maths .                              (rule 38)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	')'            shift, and enter state 86
			(reduce using rule 38)

	'=='           reduce using rule 38
	'<'            reduce using rule 38
	'>'            reduce using rule 38


State 73

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 41)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 42)
	ComparableExp -> '(' ComparableExp . ')'            (rule 44)

	')'            shift, and enter state 98
	'=='           shift, and enter state 75
	'<'            shift, and enter state 76
	'>'            shift, and enter state 77


State 74

	Cond -> if '(' ComparableExp ')' . ':' Exp else ':' Exp    (rule 46)

	':'            shift, and enter state 97


State 75

	ComparableExp -> ComparableExp '==' . ComparableExp    (rule 40)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 69
	trueValue      shift, and enter state 39
	falseValue     shift, and enter state 40
	'!'            shift, and enter state 70

	Maths          goto state 65
	B              goto state 66
	Comparables    goto state 67
	ComparableExp  goto state 96

State 76

	ComparableExp -> ComparableExp '<' . ComparableExp    (rule 41)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 69
	trueValue      shift, and enter state 39
	falseValue     shift, and enter state 40
	'!'            shift, and enter state 70

	Maths          goto state 65
	B              goto state 66
	Comparables    goto state 67
	ComparableExp  goto state 95

State 77

	ComparableExp -> ComparableExp '>' . ComparableExp    (rule 42)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 69
	trueValue      shift, and enter state 39
	falseValue     shift, and enter state 40
	'!'            shift, and enter state 70

	Maths          goto state 65
	B              goto state 66
	Comparables    goto state 67
	ComparableExp  goto state 94

State 78

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)
	OutPatternRec -> Maths . ']'                        (rule 36)
	OutPatternRec -> Maths . ',' OutPatternRec          (rule 37)

	'+'            shift, and enter state 59
	'-'            shift, and enter state 60
	'*'            shift, and enter state 61
	'/'            shift, and enter state 62
	']'            shift, and enter state 92
	','            shift, and enter state 93


State 79

	OutPattern -> '[' Maths ',' OutPatternRec .         (rule 34)

	')'            reduce using rule 34
	';'            reduce using rule 34
	else           reduce using rule 34
	%eof           reduce using rule 34


State 80

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)
	Maths -> Maths '/' Maths .                          (rule 10)

	'+'            reduce using rule 10
	'-'            reduce using rule 10
	'*'            reduce using rule 10
	'/'            reduce using rule 10
	')'            reduce using rule 10
	']'            reduce using rule 10
	','            reduce using rule 10
	';'            reduce using rule 10
	else           reduce using rule 10
	'=='           reduce using rule 10
	'<'            reduce using rule 10
	'>'            reduce using rule 10
	%eof           reduce using rule 10


State 81

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths '*' Maths .                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)

	'+'            reduce using rule 9
	'-'            reduce using rule 9
	'*'            reduce using rule 9
	'/'            reduce using rule 9
	')'            reduce using rule 9
	']'            reduce using rule 9
	','            reduce using rule 9
	';'            reduce using rule 9
	else           reduce using rule 9
	'=='           reduce using rule 9
	'<'            reduce using rule 9
	'>'            reduce using rule 9
	%eof           reduce using rule 9


State 82

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths '-' Maths .                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)

	'+'            reduce using rule 8
	'-'            reduce using rule 8
	'*'            reduce using rule 8
	'/'            reduce using rule 8
	')'            reduce using rule 8
	']'            reduce using rule 8
	','            reduce using rule 8
	';'            reduce using rule 8
	else           reduce using rule 8
	'=='           reduce using rule 8
	'<'            reduce using rule 8
	'>'            reduce using rule 8
	%eof           reduce using rule 8


State 83

	Maths -> Maths . '+' Maths                          (rule 7)
	Maths -> Maths '+' Maths .                          (rule 7)
	Maths -> Maths . '-' Maths                          (rule 8)
	Maths -> Maths . '*' Maths                          (rule 9)
	Maths -> Maths . '/' Maths                          (rule 10)

	'+'            reduce using rule 7
	'-'            reduce using rule 7
	'*'            reduce using rule 7
	'/'            reduce using rule 7
	')'            reduce using rule 7
	']'            reduce using rule 7
	','            reduce using rule 7
	';'            reduce using rule 7
	else           reduce using rule 7
	'=='           reduce using rule 7
	'<'            reduce using rule 7
	'>'            reduce using rule 7
	%eof           reduce using rule 7


State 84

	MatchRec -> Var . ']'                               (rule 31)
	MatchRec -> Var . ',' MatchRec                      (rule 32)

	']'            shift, and enter state 90
	','            shift, and enter state 91


State 85

	Match -> '[' Var ',' MatchRec .                     (rule 30)

	'='            reduce using rule 30


State 86

	Maths -> '(' Maths ')' .                            (rule 11)

	'+'            reduce using rule 11
	'-'            reduce using rule 11
	'*'            reduce using rule 11
	'/'            reduce using rule 11
	')'            reduce using rule 11
	']'            reduce using rule 11
	','            reduce using rule 11
	';'            reduce using rule 11
	else           reduce using rule 11
	'=='           reduce using rule 11
	'<'            reduce using rule 11
	'>'            reduce using rule 11
	%eof           reduce using rule 11


State 87

	FuncBodyInitAreaRec -> VarInit '}' .                (rule 50)

	var            reduce using rule 50
	'('            reduce using rule 50
	'['            reduce using rule 50
	if             reduce using rule 50


State 88

	FuncBodyInitAreaRec -> VarInit ',' . FuncBodyInitAreaRec    (rule 51)

	var            shift, and enter state 9

	Var            goto state 7
	VarInit        goto state 41
	FuncBodyInitAreaRecgoto state 89

State 89

	FuncBodyInitAreaRec -> VarInit ',' FuncBodyInitAreaRec .    (rule 51)

	var            reduce using rule 51
	'('            reduce using rule 51
	'['            reduce using rule 51
	if             reduce using rule 51


State 90

	MatchRec -> Var ']' .                               (rule 31)

	'='            reduce using rule 31


State 91

	MatchRec -> Var ',' . MatchRec                      (rule 32)

	var            shift, and enter state 9

	Var            goto state 84
	MatchRec       goto state 101

State 92

	OutPatternRec -> Maths ']' .                        (rule 36)

	')'            reduce using rule 36
	';'            reduce using rule 36
	else           reduce using rule 36
	%eof           reduce using rule 36


State 93

	OutPatternRec -> Maths ',' . OutPatternRec          (rule 37)

	intValue       shift, and enter state 23
	var            shift, and enter state 53
	'('            shift, and enter state 25

	Maths          goto state 78
	OutPatternRec  goto state 100

State 94

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 41)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 42)
	ComparableExp -> ComparableExp '>' ComparableExp .    (rule 42)

	')'            reduce using rule 42
	'=='           reduce using rule 42
	'<'            reduce using rule 42
	'>'            reduce using rule 42


State 95

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 41)
	ComparableExp -> ComparableExp '<' ComparableExp .    (rule 41)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 42)

	')'            reduce using rule 41
	'=='           reduce using rule 41
	'<'            reduce using rule 41
	'>'            reduce using rule 41


State 96

	ComparableExp -> ComparableExp . '==' ComparableExp    (rule 40)
	ComparableExp -> ComparableExp '==' ComparableExp .    (rule 40)
	ComparableExp -> ComparableExp . '<' ComparableExp    (rule 41)
	ComparableExp -> ComparableExp . '>' ComparableExp    (rule 42)

	')'            reduce using rule 40
	'=='           reduce using rule 40
	'<'            reduce using rule 40
	'>'            reduce using rule 40


State 97

	Cond -> if '(' ComparableExp ')' ':' . Exp else ':' Exp    (rule 46)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	'['            shift, and enter state 18
	if             shift, and enter state 19

	Exp            goto state 99
	Equals         goto state 12
	Match          goto state 13
	OutPattern     goto state 14
	Cond           goto state 15

State 98

	ComparableExp -> '(' ComparableExp ')' .            (rule 44)

	')'            reduce using rule 44
	'=='           reduce using rule 44
	'<'            reduce using rule 44
	'>'            reduce using rule 44


State 99

	Exp -> Exp . ';' Exp                                (rule 6)
	Cond -> if '(' ComparableExp ')' ':' Exp . else ':' Exp    (rule 46)

	';'            shift, and enter state 31
	else           shift, and enter state 102


State 100

	OutPatternRec -> Maths ',' OutPatternRec .          (rule 37)

	')'            reduce using rule 37
	';'            reduce using rule 37
	else           reduce using rule 37
	%eof           reduce using rule 37


State 101

	MatchRec -> Var ',' MatchRec .                      (rule 32)

	'='            reduce using rule 32


State 102

	Cond -> if '(' ComparableExp ')' ':' Exp else . ':' Exp    (rule 46)

	':'            shift, and enter state 103


State 103

	Cond -> if '(' ComparableExp ')' ':' Exp else ':' . Exp    (rule 46)

	var            shift, and enter state 16
	'('            shift, and enter state 17
	'['            shift, and enter state 18
	if             shift, and enter state 19

	Exp            goto state 104
	Equals         goto state 12
	Match          goto state 13
	OutPattern     goto state 14
	Cond           goto state 15

State 104

	Exp -> Exp . ';' Exp                                (rule 6)
	Cond -> if '(' ComparableExp ')' ':' Exp else ':' Exp .    (rule 46)

	')'            reduce using rule 46
	';'            reduce using rule 46
	else           reduce using rule 46
	%eof           reduce using rule 46


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 52
Number of terminals: 30
Number of non-terminals: 18
Number of states: 105
