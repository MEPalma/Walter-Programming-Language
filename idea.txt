struct x {
    int x;
    char y;
}

[(int:x:value), (char:y:value)]

//modules -> name with functions and values
[] is a module

Module moduleName
    Function ...
    Vars..

module::moduleFunction
module::moduleVariable (readonly)

//variable initialization
x : Int
x : Int = 9



//list initialization
list : [Int]
list : [Int] = [1, 3, 4, 5] 
list : [Int] = [1 to 5]
list : [Int] = [1 to 5 every 2] //1, 3, 5

[] list : [Function]
[function_name] list : [Function]
[function_name, function_name] list : [Function]


//fuction initialization
Function function_name (list : [Int], var : Int) -> Int
    for x in list
        std::out < x < std::space < std::endl

    for (i = 0; i < []::length(list); i += 1)
        std::out << []::at(list, i) << std::space << std::endl

    -> 3

Function function_name (args : [Int]) -> Int
    case args == []
        -> 0
    case any
        -> []::head(args) + function_name([]::tail(args)) 


read(list, EOF)


